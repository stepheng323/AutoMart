{
	"swagger": "2.0",
	"info": {
		"description": "This api powers automart services.  You can find out more about     automart [here](https://stepheng323.github.io/Automart/UI). For protected route, get a token by either the sign up route or sign in route, click on the authorized botton and add your token followin this pattern `bearer: token goes here`",
		"version": "1.0.0",
		"title": "Automart",
		"termsOfService": "",
		"contact": {
			"email": "stepheng323@gmail.com"
		},
		"license": {
			"name": "ISC",
			"url": "https://www.isc.org"
		}
	},
	"host": "automartendpoints.herokuapp.com",
	"basePath": "/api/v1",
	"tags": [
		{
			"name": "Automarts",
			"description": "classfied car ads",
			"externalDocs": {
				"description": "Find out more",
				"url": "https://stepheng323.github.io/Automart/UI"
			}
		}
	],
	"schemes": ["https"],
	"paths": {
		"/auth/signup": {
			"post": {
				"tags": ["auth"],
				"summary": "Register a new user",
				"description": "This route registers a new user to the database",
				"operationId": "addUser",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "",
						"required": true,
						"schema": {
							"$ref": "#/definitions/User"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					},
					"400": {
						"description": "Invalid username/password supplied"
					}
				}
			}
		},
		"/auth/signin": {
			"post": {
				"tags": ["auth"],
				"summary": "Logs user into the system",
				"description": "",
				"operationId": "loginUser",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "body",
						"name": "req",
						"description": "The password for login",
						"required": true,
						"schema": {
							"$ref": "#/definitions/signIn"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation"
					},
					"400": {
						"description": "Invalid username/password supplied"
					}
				}
			}
		},
		"/car": {
			"post": {
				"tags": ["car"],
				"summary": "Post a car ad",
				"description": "post a new car to the database",
				"operationId": "placeOrder",
				"consumes": ["multipart/form-data"],
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "state",
						"description": "",
						"required": true,
						"type": "string",
						"enum": ["new", "used"]
					},
					{
						"in": "formData",
						"name": "status",
						"description": "The default is avalable. it can also be marked as sold by the owner",
						"required": true,
						"type": "string",
						"enum": ["available", "sold"],
						"default": "available"
					},
					{
						"name": "price",
						"in": "formData",
						"description": "The amount you want to sell your car for",
						"required": true,
						"type": "string"
					},
					{
						"name": "manufacturer",
						"in": "formData",
						"description": "",
						"required": true,
						"type": "string"
					},
					{
						"name": "model",
						"in": "formData",
						"description": "",
						"required": true,
						"type": "string"
					},
					{
						"name": "body_type",
						"in": "formData",
						"description": "",
						"required": true,
						"type": "string"
					},
					{
						"name": "product_image",
						"in": "formData",
						"description": "Should be either jpg/png",
						"required": true,
						"type": "file"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/Car"
						}
					},
					"400": {
						"description": "Invalid car"
					}
				},
				"security": [
					{
						"Bearer": []
					}
				]
			},
			"get": {
				"tags": ["car"],
				"summary": "Get all cars sold or available",
				"description": "Only admins can view this",
				"operationId": "unsoldAvailable",
				"produces": ["application/json"],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/Car"
						}
					},
					"400": {
						"description": "Invalid ID supplied"
					},
					"404": {
						"description": "Car not found"
					}
				},
				"security": [
					{
						"Bearer": []
					}
				]
			}
		},
		"/car?status=available": {
			"get": {
				"tags": ["car"],
				"summary": "Get all unsold cars",
				"description": "Get all cars whose status is available",
				"operationId": "available",
				"produces": ["application/json"],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/Car"
						}
					},
					"400": {
						"description": "No car found"
					}
				},
				"security": [
					{
						"Bearer": []
					}
				]
			}
		},
		"/car/{id}/price": {
			"patch": {
				"tags": ["car"],
				"summary": "Update the price of your car ad",
				"description": "",
				"consumes": ["application/x-www-form-urlencoded"],
				"operationId": "carId",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"type": "integer",
						"description": "The id of the car to updated",
						"required": true
					},
					{
						"name": "price",
						"in": "formData",
						"type": "number",
						"description": "The new car price",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Successful operation"
					},
					"400": {
						"description": "Car not found"
					},
					"401": {
						"description": "Unauthorized"
					},
					"403": {
						"description": "Forbidden"
					}
				},
				"security": [
					{
						"Bearer": []
					}
				]
			}
		},
		"/car/{id}": {
			"delete": {
				"tags": ["car"],
				"summary": "Delete a specific car by id",
				"description": "Only admins can delete a car ad",
				"operationId": "deleteCar",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Car deleted successfuly"
					},
					"400": {
						"description": "No car found"
					}
				},
				"security": [
					{
						"Bearer": []
					}
				]
			},
			"get": {
				"tags": ["car"],
				"summary": "Get a specific car by id",
				"description": "Get a specific car by its id",
				"operationId": "specificCar",
				"produces": ["application/json"],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of car that needs to be fetched",
						"required": true,
						"type": "integer"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation"
					},
					"400": {
						"description": "Invalid ID supplied"
					}
				}
			}
		},
		"/order": {
			"post": {
				"tags": ["order"],
				"summary": "Post a new purchase order",
				"description": "",
				"operationId": "getOrderById",
				"produces": ["application/json"],
				"parameters": [
					{
						"name": "orderId",
						"in": "body",
						"description": "ID of pet that needs to be fetched",
						"required": true,
						"schema": {
							"$ref": "#/definitions/postOrder"
						}
					}
				],
				"responses": {
					"201": {
						"description": "successful operation"
					},
					"400": {
						"description": "Invalid ID supplied"
					},
					"404": {
						"description": "Order not found"
					}
				},
				"security": [
					{
						"Bearer": []
					}
				]
			}
		},
		"/order/{id}/price": {
			"patch": {
				"tags": ["order"],
				"summary": "Update purchase order price",
				"description": "",
				"operationId": "orderId",
				"produces": ["application/json"],
				"consumes": ["application/x-www-form-urlencoded"],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of car that needs to be updated",
						"required": true,
						"type": "integer"
					},
					{
						"name": "new_price_offered",
						"in": "formData",
						"description": "New price",
						"required": true,
						"type": "number"
					}
				],
				"responses": {
					"201": {
						"description": "successful operation"
					},
					"404": {
						"description": "Order not found"
					}
				},
				"security": [
					{
						"Bearer": []
					}
				]
			}
		},
		"/car/{id}/status": {
			"patch": {
				"tags": ["car"],
				"summary": "Mark car as sold",
				"description": "",
				"operationId": "status",
				"produces": ["application/json"],
				"consumes": ["application/x-www-form-urlencoded"],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of car that needs to be mark as sold",
						"required": true,
						"type": "integer"
					},
					{
						"name": "status",
						"in": "formData",
						"description": "New status",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Updated successfully"
					},
					"403": {
						"description": "Forbidden"
					},
					"404": {
						"description": "Car not found"
					}
				},
				"security": [
					{
						"Bearer": []
					}
				]
			}
		}
	},
	"securityDefinitions": {
		"Bearer": {
			"type": "apiKey",
			"name": "Authorization",
			"in": "header"
		}
	},
	"definitions": {
		"User": {
			"type": "object",
			"properties": {
				"email": {
					"type": "string"
				},
				"first_name": {
					"type": "string"
				},
				"last_name": {
					"type": "string"
				},
				"password": {
					"type": "string"
				},
				"address": {
					"type": "string"
				},
				"is_admin": {
					"type": "boolean",
					"description": "User Status",
					"default": false
				}
			}
		},
		"Order": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer"
				},
				"buyer": {
					"type": "integer"
				},
				"car_id": {
					"type": "integer"
				},
				"amount": {
					"type": "number"
				},
				"status": {
					"type": "string",
					"description": "Order Status",
					"enum": ["pending", "accepted", "rejected"]
				}
			}
		},
		"postOrder": {
			"type": "object",
			"properties": {
				"car_id": {
					"type": "integer"
				},
				"amount": {
					"type": "number"
				}
			}
		},
		"signIn": {
			"type": "object",
			"properties": {
				"email": {
					"type": "string"
				},
				"password": {
					"type": "string"
				}
			}
		},
		"Car": {
			"type": "object",
			"properties": {
				"state": {
					"type": "string"
				},
				"status": {
					"type": "string"
				},
				"price": {
					"type": "number"
				},
				"manufacturer": {
					"type": "string"
				},
				"model": {
					"type": "string"
				},
				"body_type": {
					"type": "string"
				},
				"product_image": {
					"type": "file"
				}
			}
		}
	}
}
